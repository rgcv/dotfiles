#!/bin/sh
# requires:
#   i3:
#     xinput (xorg-xinput, property setting)
#   sway:
#     swaymsg (sway, touchpad information)
#     jq (jq, parse json)
set -e

app_name=${0##*/}
state_file="${XDG_STATE_HOME-$HOME/.local/state}/touchpad/status"
nid_file="${XDG_RUNTIME_DIR-/tmp}/.$app_name.bin.nid"
should_notify=false
toggle=false
restore=false

true()  { return 0; }
false() { ! true;   }

usage() {
  err=${1-0}
  [ "$err" -eq 0 ] || exec >&2
  cat <<USAGE
Usage: $app_name [OPTION...]
Options:
  -h,--help     Show this usage message.
  -n,--notify   Trigger a notification.
  -r,--restore  Restore the status from a file or store the
                current one if it doesn't exist.
  -t,--toggle   Toggle touchpad status.
USAGE
  exit "$err"
}
notify() {
  notify-send.sh \
    --urgency normal \
    --expire-time 3000 \
    --app-name "$app_name" \
    --icon input-touchpad \
    --replace-file "$nid_file" \
    "$@"
}
check_avail() {
  if ! command -v "$1" >/dev/null; then
    echo >&2 "Missing dependency: $1"
    $should_notify && notify "Missing dependency: $1"
    false
  else
    true
  fi
}

if [ -n "$SWAYSOCK" ]; then
  check_avail swaymsg || exit 1
  check_avail jq || exit 1
else
  check_avail xinput || exit 1
fi

while [ -n "$1" ]; do
  case $1 in
    -h|--help) usage ;;
    -n|--notify) should_notify=true ;;
    -r|--restore) restore=true ;;
    -t|--toggle) toggle=true ;;
     *) break ;;
  esac
  shift
done

[ $# -gt 0 ] && usage 1
$restore || $toggle || usage 1

if [ -f "$state_file" ]; then
  read -r status < "$state_file"
else
  mkdir -p "${state_file%/*}"
  if [ -n "$SWAYSOCK" ]; then
    evs=$(swaymsg -t get_inputs |
      jq -r 'first(.[], select(.type=="touchpad")).libinput.send_events')
    [ "$evs" = disabled ] && status=0 || status=1
  else
    setting="Device Enabled"
    tpid=$(xinput list | grep -i touchpad | grep -o 'id=[0-9]*')
    tpid=${tpid#id=}
    [ -n "$tpid" ] || exit
    status=$(xinput list-props "$tpid" | awk -F: '$0 ~ /'"$setting"'/ {print $2}')
  fi
  $restore && echo "$status" > "$state_file"
fi

if $restore; then
  exit
fi

new=$((status^1))

if [ -n "$SWAYSOCK" ]; then
  [ $new -eq 0 ] && cmd=disabled || cmd=enabled
  swaymsg -q "input 'type:touchpad' events $cmd"
else
  xinput set-prop "$tpid" "$setting" $new
fi

echo $new > "$state_file"

$should_notify || exit 0

if [ $new -eq 0 ]; then
  notify \
    --urgency low \
    --icon input-touchpad-off \
    "Touchpad Disabled"
else
  notify \
    --urgency normal \
    --icon input-touchpad-on \
    "Touchpad Enabled"
fi

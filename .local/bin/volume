#!/bin/sh
# requires:
#   pactl (libpulse, set sink/source volume)
# uses:
#   canberra-gtk-play (libcanberra, play volume change sound
#                      libcanberra-pulse, pulseaudio backend may be required)
set -e

app_name=bin.$(basename "$0")
lock_file=${XDG_RUNTIME_DIR-/tmp}/.$app_name.lock
should_notify=false
is_output=true

true()  { return 0; }
false() { ! true;   }

usage() {
  err=${1-0}
  [ "$err" -eq 0 ] || exec >&2
  cat<<EOF
Usage: $app_name [options] [-|+]<value>[%]
  -h, --help    Show this.

  --notify      Show a notification with updated information.

  -i, --input   Apply changes to input audio device.
  -o, --output  Apply changes to output audio device.

  -m, --mute    Mute device.
  -u, --unmute  Unmute device.
  -t, --toggle  Toggle device mute state.
EOF
  exit "$err"
}
notify() {
  if $is_output; then
    _notify_icon=notification-audio-volume
  else
    _notify_icon=notification-microphone-sensitivity
  fi

  _notify_icon=$_notify_icon-high
  notify-send \
    --urgency normal \
    --expire-time 3000 \
    --app-name "$app_name" \
    --icon $_notify_icon \
    "$@"
  unset _notify_icon
}
check_avail() {
  if ! command -v "$1" >/dev/null; then
    echo >&2 "Missing dependency: $1"
    $should_notify && notify "Missing dependency: $1"
    false
  else
    true
  fi
}

[ -f "$lock_file" ] && exit
touch "$lock_file" && trap 'rm -f "$lock_file"' EXIT HUP INT TERM

# input parsing and validation
[ $# -gt 0 ] || usage 1

while [ $# -gt 0 ]; do
  case $1 in
    -h|--help) usage ;;

    --notify) should_notify=true ;;

    -i|--input)  is_output=false ;;
    -o|--output) is_output=true  ;;

    -m|--mute)   mute=true   ;;
    -u|--unmute) mute=false  ;;
    -t|--toggle) mute=toggle ;;

    *) break ;;
  esac
  shift
done

check_avail pactl || exit 1

if $is_output; then
  target=sink
else
  target=source
fi
TARGET=$(echo $target | tr '[:lower:]' '[:upper:]')

if [ $# -gt 0 ]; then
  t=${1#[-+]}
  case ${t%\%} in
    *[![:digit:]]*|'') usage 1 ;;
  esac

  pactl set-$target-volume "@DEFAULT_$TARGET@" "$1"
fi
[ -n "$mute" ] && pactl set-$target-mute "@DEFAULT_$TARGET@" $mute

$should_notify || exit 0

# query values for notification
device=$(pactl info | grep "Default S${target#s}:")
device=${device#*: }

data=$(pactl list ${target}s | grep -A8 "Name: $device")

description=$(echo "$data" | grep Description:)
description=${description#*: }

volume=$(echo "$data" | grep Volume: | grep -o '[[:digit:]]*%' | head -n 1)
volume=${volume%\%}

muted=$(echo "$data" | grep Mute:)
muted=${muted#*: }

icon=notification
if $is_output; then
  label="Output volume"
  icon=$icon-audio-volume
else
  label="Input sensitivity"
  icon=$icon-microphone-sensitivity
fi

case $muted in
  yes)
    volume=0
    summary="$label: muted"
    urgency=low
    icon=$icon-muted
    ;;
  *)
    summary="$label: $volume%"
    case $volume in
      0)                        urgency=low      icon=$icon-muted  ;;
      [1-9]|[12][0-9]|3[0-2])   urgency=normal   icon=$icon-low    ;;
      3[3-9]|[45][0-9]|6[0-5])  urgency=normal   icon=$icon-medium ;;
      6[6-9]|[7-9][0-9]|100)    urgency=normal   icon=$icon-high   ;;
      *)                        urgency=critical icon=$icon-high   ;;
    esac
    ;;
esac

pgrep -xu "$USER" pactl || pkill -RTMIN+25 i3blocks
notify \
  --urgency $urgency \
  --icon $icon \
  --hint int:value:"$volume" \
  "$summary" "$description"

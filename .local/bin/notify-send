#!/bin/sh
# A wrapper around `notify-send` that manages notification IDs
# based on the provided app name.

CMD=notify-send
NOTIFY=$(command -v -p $CMD)
if [ -z "$NOTIFY" ]; then
  # let the shell handle the missing binary
  exec $CMD
fi

process_args() {
  while [ $# -gt 0 ]; do
    case $1 in
      -p|--print-id) PRINT_ID=yes ;;
      -r|--replace-id|--replace-id=*) REPLACE_ID=yes ;;
      -a|-[:alpha:]*a|--app-name|--app-name=*)
        APP_NAME=${1#*=}
        [ "$APP_NAME" != "$1" ] || APP_NAME=$2
        ;;
    esac
    shift
  done
}
process_args "$@"

if [ -n "$REPLACE_ID" ]; then
  # assume it is managed externally, nothing else to do
  exec $NOTIFY "$@"
elif [ -n "$APP_NAME" ]; then
  NID_FILE=${XDG_RUNTIME_DIR-/tmp}/.$APP_NAME.nid
  [ ! -r "$NID_FILE" ] || OLD_NID=$(cat "$NID_FILE")
fi

OUT=$(
  $NOTIFY \
    "$@" \
    --print-id \
    --replace-id "${OLD_NID:-0}"
)
ERROR=$?
[ $ERROR -eq 0 ] || exit $ERROR

case $OUT in
  *[![:digit:]]*)
    # output and exit however notify-send did
    echo "$OUT"
    exit
    ;;
esac
# respect --print-id
[ -z "$PRINT_ID" ] || echo "$OUT"

if [ -n "$NID_FILE" ]; then
  mkdir -p "$(dirname "$NID_FILE")"
  touch -a "$NID_FILE"
  echo "$OUT" > "$NID_FILE"
fi

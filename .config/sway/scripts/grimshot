#!/bin/sh
# shellcheck disable=SC1090
# adaptation of sway's upstream `grimshot` script
set -e

## Grimshot: a helper for screenshots within sway
## Requirements:
##  - `grim`: screenshot utility for wayland
##  - `slurp`: to select an area
##  - `swaymsg`: to read properties of current window
##  - `wl-copy`: clipboard utility
##  - `jq`: json utility to parse swaymsg output
##  - `notify-send`: to show notifications
## Those are needed to be installed, if unsure, run `grimshot check`
##
## See `man 1 grimshot` or `grimshot usage` for further details.

SELF=${0##*/}
get_target_directory() {
  [ -f "${XDG_CONFIG_HOME-$HOME/.config}/user-dirs.dirs" ] &&
     . "${XDG_CONFIG_HOME-$HOME/.config}/user-dirs.dirs"

  echo "${XDG_SCREENSHOTS_DIR-${XDG_PICTURES_DIR-$HOME}}"
}

# in case they're binaries, this is faster
true()  { return 0; }
false() { ! true;   }

if [ "$1" = "--notify" ]; then
  NOTIFY=true
  shift
else
  NOTIFY=false
fi

ACTION=${1-usage}
SUBJECT=${2-screen}
FILE=${3-$(get_target_directory)/$(date +%Y%m%dT%H%M%S%z).png}
DIR=${FILE%/*}
[ -d "$DIR" ] || mkdir -p "$DIR"

case $ACTION in
  save|copy|check) ;;
  *) cat<<USAGE
Usage:
  $SELF [--notify] (copy|save) [active|screen|output|area|window] [FILE]
  $SELF check
  $SELF usage

Commands:
  copy: Copy the screenshot data into the clipboard.
  save: Save the screenshot to a regular file.
  check: Verify if required tools are installed and exit.
  usage: Show this message and exit.

Targets:
  active: Currently active window.
  screen: All visible outputs.
  output: Currently active output.
  area: Manually select a region.
  window: Manually select a window.
USAGE
  exit ;;
esac

notify() { notify-send -t 3000 -a "$SELF" "$@"; }
notify_ok() {
  $NOTIFY || return

  TITLE=${2-Screenshot}
  MESSAGE=${1-OK}
  notify -i dialog-information "$TITLE" "$MESSAGE"
}
notify_error() {
  MESSAGE=${1-Error taking screenshot with grim}

  if ! $NOTIFY; then
    echo >&2 "$MESSAGE"
    return
  fi

  TITLE=${2-Screenshot}
  notify -i dialog-error -u critical "$TITLE" "$MESSAGE"
}

die() {
  MSG=${1-Bye}
  notify_error "Error: $MSG"
  exit 2
}

check() {
  if command -v "$1" >/dev/null; then
    echo "   $1: OK"
  else
    echo "   $1: NOT FOUND"
  fi
}

take_screenshot() {
  FILE=$1
  GEOM=$2
  OUTPUT=$3
  if [ -n "$OUTPUT" ]; then
    grim -o "$OUTPUT" "$FILE" || die "Unable to invoke grim"
  elif [ -z "$GEOM" ]; then
    grim "$FILE" || die "Unable to invoke grim"
  else
    grim -g "$GEOM" "$FILE" || die "Unable to invoke grim"
  fi
}

if [ "$ACTION" = check ] ; then
  echo "Checking if required tools are installed. If something is missing,"
  echo "install it to your system and make it available in PATH..."
  check grim
  check slurp
  check swaymsg
  check wl-copy
  check jq
  check notify-send
  exit
fi

case $SUBJECT in
  area)
    GEOM=$(slurp -d)
    # Check if user exited slurp without selecting the area
    [ -n "$GEOM" ] || exit
    WHAT=Area
    ;;
  active)
    FOCUSED=$(swaymsg -t get_tree |
      jq -r 'recurse(.nodes[]?, .floating_nodes[]?) | select(.focused)')
    GEOM=$(echo "$FOCUSED" | jq -r '.rect | "\(.x),\(.y) \(.width)x\(.height)"')
    APP_ID=$(echo "$FOCUSED" | jq -r '.app_id')
    WHAT="$APP_ID window"
    ;;
  screen)
    GEOM=
    WHAT=Screen
    ;;
  output)
    GEOM=
    OUTPUT=$(swaymsg -t get_outputs |
      jq -r '.[] | select(.focused)' | jq -r '.name')
    WHAT=$OUTPUT
    ;;
  window)
    GEOM=$(swaymsg -t get_tree |
      jq -r '.. | select(.pid? and .visible?) | .rect |
        "\(.x),\(.y) \(.width)x\(.height)"' |
      slurp)
    # Check if user exited slurp without selecting the area
    [ -n "$GEOM" ] || exit
    WHAT=Window
    ;;
  *) die "Unknown subject to take a screen shot from" "$SUBJECT" ;;
esac

if [ "$ACTION" = copy ] ; then
  take_screenshot - "$GEOM" "$OUTPUT" | wl-copy --type image/png ||
    die "Clipboard error"
  notify_ok "$WHAT copied to buffer"
else
  if take_screenshot "$FILE" "$GEOM" "$OUTPUT"; then
    TITLE="Screenshot of $SUBJECT"
    MESSAGE=$(basename "$FILE")
    notify_ok "$MESSAGE" "$TITLE"
    echo "$FILE"
  else
    notify_error "Error taking screenshot with grim"
  fi
fi
